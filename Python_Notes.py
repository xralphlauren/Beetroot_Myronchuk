### _____life hack_____
# Cntrl + / - закоментить выделенное
# ПКМ > Execute line in Python Console - Запустить определённый кусок кода
# elif - если будет выражение if, а потом elif и выражение будет подходить под оба алгоритма, то выведется только первый
# False = 0 /// True = 1
# x is True = х является тру
# Вместе с while можно использовать else на одном уровне
# Есть простые типы данных - int,float,tutle / есть Сложные - list, tuple, dict
# Есть 3 типа команд:
линейные команды
логический выбор ( if else )
циклы (while for )
# duck typing - утиное типирование ( по такому типу пайтон определяет тип данных):
если '' строка
если .0 флоат
# Последовательность поиска имен при импорте
1. built-ins
2. В папке откуда запускается файл
3. Все папки которые указаны в - import sys / sys.path() ( можно добавить ещё пути через sys.path.append() или .insert() ) 

в импортированых библиотеках могут находиться другие модули и их так же можно вызывать
Пример 
import turtle
turtle.math

где лажат библиотеки (не стандартые, типа pandas):
https://pypi.org/

# venv:
cd C:\Python # путь где создать папку
python3 -m venv vik # где mds название папки
cd vik/Scripts/activate.bat
-m pip install numpy ( или pip install numpy )
deactivate.bat - деактивировать бат

python -m pip list # посмотреть список библиотек
pip freeze > test_freeze.txt # все либы загрузить в файл
pip install -r test_freeze.txt # загрузить все либы из файла



### _____String_____

# .isalpha() - проверяет относится ли переменная к буквам ( строкам )
# .isdigit() - проверяет относится ли переменная к цифрам
# .islower() - проверяет является ли строка в нижнем регистре
# .isupper() - проверяет является ли строка в верхнем регистре
# .split() - разбивает строку на части и превращает в список ( если не указывать в скобке аргумент, то разобьет по запятой )
# .split(':') - разобьет строку по ':' ( можно ввести любой символ как аргумент разбивки )
# .split(maxspilit=2) - режит конкретное число раз ( если в стркое 5 запятых, то разобьет только первых две слева на право )
# .rsplit(maxspilit=2) - порежет строку 2 раза, но справа на лево
# .strip() - убирает пробелы внутри строки
# .lstrip() - убирает пробелы слева
# .rstrip() - убирает пробелы справа
# .find(str) - поиск индекса строки ( если ничего не найдёт то выведет -1 )
# .index(str) - поиск индекса строки ( если ничего не найдёт то выведет эрор )
# .rfind(str) - поиск индекса строки ( справа на лево / если ничего не найдёт то выдаст -1)
# .title() - Сделать первую букву большой во всёх словах в строке
# .round() - функция округления числа
# .sort(reverse=True) - отсортировать от большого к малому
# .abs() - число по модулю ( число с минусом претворяем в число с плюсом )
# .center(20, '_') - смещает str в центр, а до и после будут '_', 20 - количество '_'
# r'asdsadsadsa' - r указывает что внутри строки спецсимволов нет ( \n; \t )
# \' - символ \ перед другим символом например кавычкой, указывает что не нужно этот символ учитывать как специальный

## join
# '.'.join([ab,ad,sd]) - 'ab.ad.sd' ( на вход поступает лист)

## imort string
string.punctuations - проверяет или элемент не относится к @,#,$ и т.д



## f strings
# print(f'i have'{variable}) , где variable это название переменной - склеивание строки
# print('Superhero name is {1}, his super power - {0}, his enemy - {2}'.format(super_power, enemy, name)) - в формат передаем переменные через запятую, в стркое цифрой указываем какую переменную хотим использовать
# print(f"Good day {name}! {day} is a perfect day to learn some python."), где name, day - название переменных



### _____List_____
# с помощью list.append(); list.pop(0) можно организовать очередь



### _____set_____



### _____tuple_____
# Варианты быстрой записи в tuple:
x, y, z = 1,2,3
t = 1,2,3
x,y,z = t




### _____Dict_____
##dict = {15: 'asdsa', 17:'sadsadas'}
# dict.keys()
# dict.values()
# dict.items()

## .get
# x = a_dict.get('hello') - найдёт значение по ключу, но если ключ не найдётся, эрора не будет
# x = a_dict.get('hello', 'str') - найдёт значение по ключу, но если ключ не найдётся, выдаст 'str'
# a_dict.get('lst_1').append(51) - если в словаре значение - это словарь, можно сделать аппенд в список по ключу, где 'lst_1' - это ключ, 51 - значение



### _____Copy_____
## сделать дубликат с разными id
# a = [1,2,3]
# b = list(a) # 1 variant
# b = a[:]    # 2 variant
# b = a.copy  # 3 variant

## deepcopy
# b = a.deepcopy
# Отличие copy и deepcopy:
Если есть вложеные листые или другие масивы, то id у внутренних массивов будут одинаковыми, и при 
изминении в скопированом обьекте, эти масивы будут тоже менятся, а если сделать deepcopy, то вложенные списки будут
не зависимы и иметь разные id
# Пример по deepcopy:
1. пример с copy:
>>> a = [1,[1,2,3],2]
>>> b = a.copy()
>>> b[1].append(5)
>>> b
[1, [1, 2, 3, 5], 2]
>>> a
[1, [1, 2, 3, 5], 2]

2. пример с deepcopy:
>>> import copy
>>> a = [1,[1,2,3],2]
>>> b = copy.deepcopy(a)
>>> b[1].append(5)
>>> b
[1, [1, 2, 3, 5], 2]
>>> a
[1, [1, 2, 3], 2]



### _____file работа с файлами_____
# prefix 
r - читать файл (read)
w - записать в файл (write)
a - добавить запись в конце (append)

# Первый вариант чтения файла
f = open('path', 'r') 
# Второй вариант чтения файла
with open('path','r') as f

# f.readlines() - разбивает весь файл по строчно
# f.readline() - берёт из файла одну строку
# f.splitlines() - сплит по строчно ( применяется заместь ридлайн обычного )
# f.readable() - проверить или файл можно прочтить
# f.writeable()- проверить или файл можно открыть чтобы записать в него что то
# print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False), где: flush=True записать в файл построчно, False подождать всего цикла и записать в файл все сразу





### _____module_random_____
import random - библиотека которая  позволяет работать с рандомом
# random.randint(1, 10) - выбрать рандомное число с промежутка 1-10
# random.random() - сгенерит рандом число
# random.choice() - вернёт рандомный символ из переменной
# random.choices() - вернёт рандомный символ из переменной и запишет в список
# random.shuffle(a) - перетасует список
# random.seed(10.9) - фиксирует точку отсчёта для рандом числа. Если два раза вбить рандом с одинаковым сидом, будет два одинаковых числа вызваных рандомом
# a = [random.randint(1,1500) for i in range(10)] - генератор случайных 10 чисел ( числа от 1 до 1500 )



### _____module_math_____
import math - библиотека которая имеет математические значения
# math.factorial() - факториал
# math.pow(3,4) - функция вознести первое число в степень второго
# math.sqrt(81) - корень числа



# _____List Comprehension_____
## Примеры dict comprehension
# count_dict = {key: value * value_1 for key, value in dict_1.items() for key_1, value_1 in dict_2.items() if key == key_1}
# count_dict = {key: value*dict_2[key] for key,value in dict_1.items()}



# _____function_____
# def func( *args ) - неограниченое количество переменных в функции
# def func( **kwargs ) - неограниченое количество переменных в функции ( но с  указанием названий аргументов
# func(5,7,10) - args вариант
# func( first - 1, name - dima ) - kwargs вариант
# len(args) - к args можно обращаться ( args - это tuple / kwargs - это словарь )
#func(*n) - * даёт возможность записать все елементы списка по одному в кортеж, если передать просто n, то будет передан список внутри кортежа и нужно будет обращаться сначала к первому индексу кортежа а уже потом к списку( for i in args[0])
_____________
def test ():
    x = 10
    def test1():
        nonlocal x
        x = 12
    test1()
    return x
    
nonlocal - даёт возможость задействовать x во второй функции и сохранять результат ( x будет равен 12 , если не исполь -
зовать nonlocal x будет равен 10 )



### _____CMD_____
# Если открыть любую папку и в адресс строке вбить cmd, то cmd откроется с тем же путем
# py file.py запустить файл через смд ( скорее всего файл должен находиться в одном из путей .path )

# в cmd 3 проверки:
1. есть ли такая команда
2. есть ли файл в текущей папке
3. есть ли файл в перечне path
path - команда показывает пути где ищаться файлы ( как в пайтон с модулями )

$$$

### _____GITHUB_____

# в cmd > cd ..... репозиторий
# git branch ( посмотреть ветки )
# git add directory ( directory - название файла или папки ) - добавить файл в нит
# git status - что зелёное, что красное
# git commit -m "first commit"
# git status
# git push

## Обновить проект с github

# git fetch - покажет что нового на github
# git pull - сделать апдейт проекта с github

# выгрузить библиотеки из проекта и загрузить из requirements в другой проект
Create requirements.txt 
pip freeze > requirements.txt
pip install -r requirements.txt
