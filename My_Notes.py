# Cntrl + / - закоментить выделенное
# ПКМ > Execute line in Python Console - Запустить определённый кусок кода
# print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False), где: flush=True записать в файл построчно, False подождать всего цикла и записать в файл все сразу
# round() - функция округления числа
# a.sort(reverse=True) - отсортировать от большого к малому
# abs() - число по модулю ( число с минусом претворяем в число с плюсом )
# \' - символ \ перед другим символом например кавычкой, указывает что не нужно этот символ учитывать как специальный
# .isalpha() - проверяет относится ли переменная к буквам ( строкам )
# .isdigit() - проверяет относится ли переменная к цифрам
# print(f'i have'{variable}) , где variable это название переменной - склеивание строки
# .find(str) - поиск индекса строки ( если ничего не найдёт то выведет -1 )
# .index(str) - поиск индекса строки ( если ничего не найдёт то выведет эрор )
# .rfind(str) -поиск индекса строки ( справа на лево / если ничего не найдёт то выдаст -1)
# print('Superhero name is {1}, his super power - {0}, his enemy - {2}'.format(super_power, enemy, name)) - в формат передаем переменные через запятую, в стркое цифрой указываем какую переменную хотим использовать
# print(f"Good day {name}! {day} is a perfect day to learn some python."), где name, day - название переменных
# False = 0 /// True = 1
# x is True = х является тру
# elif - если будет выражение if, а потом elif и выражение будет подходить под оба алгоритма, то выведется только первый
# Вместе с while можно использовать else на одном уровне
# import random // random.randint(1, 10) - выбрать рандомное число с промежутка 1-10
# import math - библиотека которая имеет математические значения
# import math / math.factorial() - факториал
# import math / math.pow(3,4) - функция вознести первое число в степень второго
# import math / math.sqrt(81) - корень числа
# import random.random() - сгенерит рандом число
# import random.randint(1,15) - сгенерит рандом число с 1 до 15
# import random.seed(10.9) - фиксирует точку отсчёта для рандом числа. Если два раза вбить рандом с одинаковым сидом, будет два одинаковых числа вызваных рандомом
# random.choice() - вернёт рандомный символ из переменной
# random.choices() - вернёт рандомный символ из переменной и запишет в словарь
# random.shuffle(a) - (Применять без без переменной ф a =  random.shuffle(a), а просто функцией ) перетасует список
# разница между генераторами и списками - генераторы хранят в себе последний элемент и правильно прерывания ( но не все элементы ) и когда генератор присваивается переменной
## он выполняет генерирование
# a = [random.randint(1,1500) for i in range(10)] - генератор случайных 10 чисел ( числа от 1 до 1500 )

#__Dict_______________________________________________________________________________
# x = a_dict.get('hello') - найдёт значение по ключу, но если ключ не найдётся, эрора не будет
# x = a_dict.get('hello', 'str') - найдёт значение по ключу, но если ключ не найдётся, выдаст 'str'
# a_dict.get('lst_1').append(51) - добавить в словарь a_dict, по ключю 'lst_1', 51 в value (который является списком)


#__List_Comprehension_______________________________________________________________________________
'''
####### Примеры list comprehension #######
# count_dict = {key: value * value_1 for key, value in dict_1.items() for key_1, value_1 in dict_2.items() if key == key_1}
# count_dict = {key: value*dict_2[key] for key,value in dict_1.items()}

'''
#__function________________________________________________________________________________
# def func( *args ) - неограниченое количество переменных в функции
#   len(args) - к args можно обращаться ( args - это tuple )
# def func( **kwargs ) - неограниченое количество переменных в функции ( но с  указанием названий аргументов
# func(5,7,10) - args вариант
# func( first - 1, name - dima ) - kwargs вариант

#___CMD________________________________________________________________________________________
# Если открыть любую папку и в адресс строке вбить cmd, то cmd откроется с тем же путем
# py file.py запустить файл через смд


#__List________________________________________________________________________________________
# list.pop(0) - удалит не последний, а первый индекс и з списка
# с помощью list.append(); list.pop(0) можно организовать очередь


#GITHUB
# в cmd > cd ..... репозиторий
# git branch ( посмотреть ветки )
# git add directory ( directory - название файла или папки ) - добавить файл в нит
# git status - что зелёное, что красное
# git commit -m "first commit"
# git status
# git push

##### Обновить проект с github #####

# git fetch - покажет что нового на github
# git pull - сделать апдейт проекта с github


dir(str) - посмотреть методы ( что можно сделать с переменной )
str.title() - Сделать первую букву большой во всёх словах в строке
a.extend(b)
Есть простые типы данных - int,float,tutle
Сложные - list...


сделать дубликат с разными id
a = [1,2,3]
b = list(a) # 1 variant
b = a[:]    # 2 variant
b = a.copy  # 3 variant

b = a.deepcopy # Если есть вложеные листые или другие масивы, то копирует id и внутренних масивов

duck typing - утиное типирование
если '' строка
если .0 флоат

str.center(20, '_') - смещает str в центр, а до и после будут '_', 20 - количество '_'

str.islower - является в нижнем регистре
str.isupper - является в верхнем регистре

str.split() - режит по определённому символу, если не указывать по пробелу ( превращает в список )
str.strip() - убирает пробелы
str.lstrip() - убирает пробелы слева
str.rstrip() - убирает пробелы справа

r'asdsadsadsa'    - r указывает что внутри строки спецсимволов нет ( \n; \t )

'.'.join([ab,ad,sd]) - 'ab.ad.sd' ( на вход поступает лист)


Есть 3 типа команд:
линейные команды
логический выбор ( if else )
циклы (while for )

zip([1,2,3], [5,6,7]) - сцепляет два списка по элементно  (1,5), (2,6), (3,7)


##############################################################3

raise , assert - ?

f = open('path', 'r') 
f.splitlines() - сплит по строчно ( применяется заместь ридлайн обычного )
f.readlines()


f.readable() - проверить или файл можно прочтить
f.writeable()- проверить или файл можно открыть чтобы записать в него что то


r - читать файл
w - записать в файл
a - добавить запись в конце

######3
imort string
string.punctuations - проверяет или элемент не относится к @,#,$ и т.д

############### Словари #####################

dict = {15: 'asdsa', 17:'sadsadas'}
dict.keys()
dict.values()
dict.items()


################## tuple ###########

x, y, z = 1,2,3
t = 1,2,3
x,y,z = t


######
1. built-ins
2. В папке откуда запускается файл
3. Все папки папки которые указаты - import sys / sys.path() ( можно добавить ещё пути через sys.path.append() или .insert() ) 

в импортированых библиотеках могут находиться другие модули и их так же можно вызывать
Пример 
import turtle
turtle.math


где лажат библиотеки (не стандартые, типа pandas):
https://pypi.org/

venv:
cd C:\Python # путь где создать папку
python3 -m venv vik # где mds название папки
cd vik/Scripts/activate.bat
-m pip install numpy ( или pip install numpy )
deactivate.bat - деактивировать бат

python -m pip list # посмотреть список библиотек

pip freeze > test_freeze.txt # все либы загрузить в файл
pip install -r test_freeze.txt # загрузить все либы из файла


в cmd 3 проверки:
1. есть ли такая команда
2. есть ли файл в текущей папке
3. есть ли файл в перечне path
path - в виде это пути папок где ищаться файлы ( как в пайтон с модулями )




