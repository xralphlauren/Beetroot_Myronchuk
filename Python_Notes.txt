Свернуть все блоки - Alt + 0
Развернуть все блоки - Alt + Shift + 0

### _____life hack_____
# Cntrl + / - закоментить выделенное
# ПКМ > Execute line in Python Console - Запустить определённый кусок кода
# elif - если будет выражение if, а потом elif и выражение будет подходить под оба алгоритма, то выведется только первый
# False = 0 /// True = 1
# x is True = х является тру
# Вместе с while можно использовать else на одном уровне
# Есть простые типы данных - int,float,tutle / есть Сложные - list, tuple, dict
# Есть 3 типа команд:
линейные команды
логический выбор ( if else )
циклы (while for )
# Framework не тоже самое что и lib ( библиотека )
# duck typing - утиное типирование ( по такому типу пайтон определяет тип данных):
если '' строка
если .0 флоат
# Последовательность поиска имен при импорте
1. built-ins
2. В папке откуда запускается файл
3. Все папки которые указаны в - import sys / sys.path() ( можно добавить ещё пути через sys.path.append() или .insert() ) 

в импортированых библиотеках могут находиться другие модули и их так же можно вызывать
Пример 
import turtle
turtle.math

где лажат библиотеки (не стандартые, типа pandas):
https://pypi.org/

## venv:
cd C:\Python # путь где создать папку
python3 -m venv vik # где mds название папки
cd vik/Scripts/activate.bat
-m pip install numpy ( или pip install numpy )
deactivate.bat - деактивировать бат

python -m pip list # посмотреть список библиотек
pip freeze > test_freeze.txt # все либы загрузить в файл
pip install -r test_freeze.txt # загрузить все либы из файла

## открыть сайт с документацией ( документы всех файлов в sys.path )
py -m pydoc -b  
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____String_____

# .isalpha() - проверяет относится ли переменная к буквам ( строкам )
# .isdigit() - проверяет относится ли переменная к цифрам
# .islower() - проверяет является ли строка в нижнем регистре
# .isupper() - проверяет является ли строка в верхнем регистре
# .split() - разбивает строку на части и превращает в список ( если не указывать в скобке аргумент, то разобьет по запятой )
# .split(':') - разобьет строку по ':' ( можно ввести любой символ как аргумент разбивки )
# .split(maxspilit=2) - режит конкретное число раз ( если в стркое 5 запятых, то разобьет только первых две слева на право )
# .rsplit(maxspilit=2) - порежет строку 2 раза, но справа на лево
# .strip() - убирает пробелы внутри строки
# .lstrip() - убирает пробелы слева
# .rstrip() - убирает пробелы справа
# .find(str) - поиск индекса строки ( если ничего не найдёт то выведет -1 )
# .index(str) - поиск индекса строки ( если ничего не найдёт то выведет эрор )
# .rfind(str) - поиск индекса строки ( справа на лево / если ничего не найдёт то выдаст -1)
# .title() - Сделать первую букву большой во всёх словах в строке
# .round() - функция округления числа
# .sort(reverse=True) - отсортировать от большого к малому
# .abs() - число по модулю ( число с минусом претворяем в число с плюсом )
# .center(20, '_') - смещает str в центр, а до и после будут '_', 20 - количество '_'
# r'asdsadsadsa' - r указывает что внутри строки спецсимволов нет ( \n; \t )
# \' - символ \ перед другим символом например кавычкой, указывает что не нужно этот символ учитывать как специальный

## join
# '.'.join([ab,ad,sd]) - 'ab.ad.sd' ( на вход поступает лист)

## imort string
string.punctuations - проверяет или элемент не относится к @,#,$ и т.д



## f strings
# print(f'i have'{variable}) , где variable это название переменной - склеивание строки
# print('Superhero name is {1}, his super power - {0}, his enemy - {2}'.format(super_power, enemy, name)) - в формат передаем переменные через запятую, в стркое цифрой указываем какую переменную хотим использовать
# print(f"Good day {name}! {day} is a perfect day to learn some python."), где name, day - название переменных
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____List_____
# с помощью list.append(); list.pop(0) можно организовать очередь
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____set_____
# set = {3, 5.6, True, 'apple'} - создать сет
# set.add(7) - добавить елемент в конец списка
# set.remove(True) - убирает елемент по названию, если елемента в тапле нет, выдаст ерор
# set.discard('apple') - убирает елемент по названию, если елемента в тапле нет, то эрор не выдаст
# x = set.pop() # удаляет 1 рандомный елемент и записывает его в переменную
print(set.intersection(set_2)) - показывает елементы, которые повторяются в обоих сетах
print(set.difference(set_2)) - убирает елементы с первого сета, если они присутсвуют и в set2
print(set.union(set_2)) - обьеденяет два сета
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____tuple_____ ( кортеж )
# tup_clear = () - создать чистый тапл
# tup = ('physics', 'chemistry', 1997, 2000) - создать тапл
# tup.append('5') - добавить елемент в конец тапла
# tup.index(1997) - узнать индекс елемента

# Варианты быстрой записи в tuple:
x, y, z = 1,2,3
t = 1,2,3
x,y,z = t
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____Dict_____
##dict = {15: 'asdsa', 17:'sadsadas'}
# dict.keys()
# dict.values()
# dict.items()

## .get
# x = a_dict.get('hello') - найдёт значение по ключу, но если ключ не найдётся, эрора не будет
# x = a_dict.get('hello', 'str') - найдёт значение по ключу, но если ключ не найдётся, выдаст 'str'
# a_dict.get('lst_1').append(51) - если в словаре значение - это словарь, можно сделать аппенд в список по ключу, где 'lst_1' - это ключ, 51 - значение
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____Copy_____
## сделать дубликат с разными id
# a = [1,2,3]
# b = list(a) # 1 variant
# b = a[:]    # 2 variant
# b = a.copy  # 3 variant

## deepcopy
# b = a.deepcopy
# Отличие copy и deepcopy:
Если есть вложеные листые или другие масивы, то id у внутренних массивов будут одинаковыми, и при 
изминении в скопированом обьекте, эти масивы будут тоже менятся, а если сделать deepcopy, то вложенные списки будут
не зависимы и иметь разные id
# Пример по deepcopy:
1. пример с copy:
>>> a = [1,[1,2,3],2]
>>> b = a.copy()
>>> b[1].append(5)
>>> b
[1, [1, 2, 3, 5], 2]
>>> a
[1, [1, 2, 3, 5], 2]

2. пример с deepcopy:
>>> import copy
>>> a = [1,[1,2,3],2]
>>> b = copy.deepcopy(a)
>>> b[1].append(5)
>>> b
[1, [1, 2, 3, 5], 2]
>>> a
[1, [1, 2, 3], 2]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____file работа с файлами_____
# prefix 
r - читать файл (read)
w - записать в файл (write)
a - добавить запись в конце (append)

# Первый вариант чтения файла
f = open('path', 'r') 
# Второй вариант чтения файла
with open('path','r') as f

# f.readlines() - разбивает весь файл по строчно
# f.readline() - берёт из файла одну строку
# f.splitlines() - сплит по строчно ( применяется заместь ридлайн обычного )
# f.readable() - проверить или файл можно прочтить
# f.writeable()- проверить или файл можно открыть чтобы записать в него что то
# print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False), где: flush=True записать в файл построчно, False подождать всего цикла и записать в файл все сразу
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____module_random_____
import random - библиотека которая  позволяет работать с рандомом
# random.randint(1, 10) - выбрать рандомное число с промежутка 1-10
# random.random() - сгенерит рандом число
# random.choice() - вернёт рандомный символ из переменной
# random.choices() - вернёт рандомный символ из переменной и запишет в список
# random.shuffle(a) - перетасует список
# random.seed(10.9) - фиксирует точку отсчёта для рандом числа. Если два раза вбить рандом с одинаковым сидом, будет два одинаковых числа вызваных рандомом
# a = [random.randint(1,1500) for i in range(10)] - генератор случайных 10 чисел ( числа от 1 до 1500 )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____module_math_____
import math - библиотека которая имеет математические значения
# math.factorial() - факториал
# math.pow(3,4) - функция вознести первое число в степень второго
# math.sqrt(81) - корень числа
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____List Comprehension_____
## Примеры dict comprehension
# count_dict = {key: value * value_1 for key, value in dict_1.items() for key_1, value_1 in dict_2.items() if key == key_1}
# count_dict = {key: value*dict_2[key] for key,value in dict_1.items()}
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____def function_____
# def func( *args ) - неограниченое количество переменных в функции
# def func( **kwargs ) - неограниченое количество переменных в функции ( но с  указанием названий аргументов
# func(5,7,10) - args вариант
# func( first - 1, name - dima ) - kwargs вариант
# len(args) - к args можно обращаться ( args - это tuple / kwargs - это словарь )
# в функциях можно указывать желаемый тип данных для аргументов ( если на вход придет тип не такой как указан, то функция выдаст ерор)
def greeting(name: str):
	return 'Hello' + name
# символ -> указывает какой тип данных ожидается на выходе в return
def greeting(name) -> str:
	return 'Hello' + name
# func(*n) - * даёт возможность записать все елементы списка по одному в кортеж, если передать просто n, то будет передан список внутри кортежа и нужно будет обращаться сначала к первому индексу кортежа а уже потом к списку( for i in args[0])
_____________
def test ():
    x = 10
    def test1():
        nonlocal x
        x = 12
    test1()
    return x
    
nonlocal - даёт возможость задействовать x во второй функции и сохранять результат ( x будет равен 12 , если не исполь -
зовать nonlocal x будет равен 10 )

## Необычная работа с функциями:
>>> def plus2(x):
		return x + 2
	
>>> f = [plus2, plus2]
>>> f[0](5)
7
>>> f = [plus2, str.upper, str.lower]
>>> f
[<function plus2 at 0x000001C1E91E1EE0>, <method 'upper' of 'str' objects>, <method 'lower' of 'str' objects>]
>>> f[2]('Бла')
'бла'
____________
>>> f = [str.isalpha, str.upper, str.lower]
>>> for i in f:
		print(i('АбраКадабра'))
True
АБРАКАДАБРА
абракадабра

____________

>>> def mul7():
		def mul(x, y):
			return x * y
	return mul
	
>>> mul7()(8, 9)
72

>>> um = mul7()
>>> um(18,9)
162
____________

>>> def muln(n):
		def mul(y):
			return n * y
	return mul

>>> muln(5)(7)
35
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____CMD_____
# Cntrl + c 						- выйти из сеанса
## command cmd
# cd C:\Python\git_lesson3 			- перейти но новому пути
# cd main							- перейти в папку main ( если там где вы находитесь, есть такая папка )
# cd ..								- вернуть на папку назад
# dir 								- посмотреть какие есть файлы в текущей папке
# echo "11111" > test.txt           - Создать файл тест и записать туда "11111"
# echo "22222" >> test.txt			- добавить "22222" в файл тест
# dir > fi.txt						- записать дир в fi.txt
# FINDSTR .py fi.txt				- найти файлы с расширением py в fi.txt




## Ключи
# -v / --version 					- Существует два вида ключей - короткий, полный ( работают одинаково )



# Если открыть любую папку и в адресс строке вбить cmd, то cmd откроется с тем же путем
# py file.py запустить файл через смд ( скорее всего файл должен находиться в одном из путей .path )

# в cmd 3 проверки:
1. есть ли такая команда
2. есть ли файл в текущей папке
3. есть ли файл в перечне path ($PATH - то, что можно указывать галочкой при установке пайтона)
path - команда показывает пути где ищаться файлы ( как в пайтон с модулями )
echo %PATH% - команда показывает пути где ищаться файлы ( как в пайтон с модулями )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### _____GITHUB_____

# в cmd > cd ..... репозиторий
# git branch ( посмотреть ветки )
# git add directory ( directory - название файла или папки ) - добавить файл в нит
# git status - что зелёное, что красное
# git commit -m "first commit"
# git status
# git push

## Обновить проект с github

# git fetch - покажет что нового на github
# git pull - сделать апдейт проекта с github

# выгрузить библиотеки из проекта и загрузить из requirements в другой проект
Create requirements.txt 
pip freeze > requirements.txt
pip install -r requirements.txt
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


______________________________________Объектно Ориентированное Программирование (ООП)______________________________________

### Инкапсуляция:
(можно назвать - под капотом )
Определение - вызывая функцию def - мы не думаем что внутри def, мы использываем функцию зная что она получит и выведит, но не вдумываемся каждый раз что происходит внутри
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

### Наследования:
# Определение - Каждый класс может наследовать родительский клас и использовать его свойства и методы
class Fire(Plane):
класс Fire наследуем класс Plane
если метод который мы вызываем нету в классе Fire, он будет искать его в родительском классе Plane

# также наследовать можно два родительских класса
class Fire(Cargo, Plane):

# также можно наследовать цепочкой классы
class Plane
class Fire(Plane)
class Cargo(Fire)
методы из плейн будут работать в карго
# Классы наследываются в глубину
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### Полиморфизм
# Определение - идея заключается в использовании единственной сущности(метод, оператор или объект) для представления различных типов в различных сценариях использования.

## полиморфизм функций:
>>>print(len("Programiz"))
>>>print(len(["Python", "Java", "C"]))
>>>print(len({"Name": "John", "Address": "Nepal"}))
9
3
2
Здесь мы можем увидеть, что различные типы данных, такие как строка, список, кортеж, множество и словарь могут работать с функцией len(). Однако, мы можем увидеть, что она возвращает
специфичную для каждого типа данных информаци. Для каждого типа данных оно считает лен по своему

## Полиморфизм в методах класса:
# Два класса могут иметь функции с одинаковым название и они могут вызываться например в цикле
# Пример:
class Cat:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a cat. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Meow")


class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a dog. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Bark")


cat1 = Cat("Kitty", 2.5)
dog1 = Dog("Fluffy", 4)

for animal in (cat1, dog1):
    animal.make_sound()
    animal.info()
    animal.make_sound()
	
Вывод:
Meow
I am a cat. My name is Kitty. I am 2.5 years old.
Meow
Bark
I am a dog. My name is Fluffy. I am 4 years old.
Bark
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### __init__ - конструдктор
# init - это конструктор, который отрабатывает один раз, при создании класса
# init так же можно наследовать из родительского класса 
# super().__init__(fname,lname) - функция наследует __init__ родительского класса
# super().takeoff(self) - вызов функции takeoff из другого класса (если родителей будет несколько - поиск функции будет идти по очереди. Сначала в первом родители, если не найдет - втором)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### dunders ( или double unders )
# дандерсами - называют методы с двумя подчеркиваниями. Они 
# __init__, __del__, __size__, __doc__, __dict__, __iter__, __dir__, __len__
 
# __repr__ - выводит название обьекта заместь кода обьекта
# __str__ - меняет код обьекта на то что нужно ( как __repr__, только __repr__ меняет онли при вызове, а __str__ везде ) 
# __len__ - вызывает функцию len
# __eq__ - функция ==
# x.__code__.co_nlocals - дандер который возвращает количество переменных в функции ( где x - функция )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### Полезные ходы
# getattr(obj, name_atr) - можно получить значение значение атрибута от обьекта ( круто использовать в цикле )
# setattr(obj, name_atr, new_value) - поменять значение атрибута в обьекте
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


### SQLite
# Использование БД имеет смысл из за скорости
 - Всё что делается со стороны БД делается быстрее, чем в пайтоне
 - 1 большой запрос лучше, чем несколько маленьких

Релационные БД(SQL) - таблички связанные между собой ( по ключам )
Не релационные БД (Mangodb)

# колонка - это поле. Поля должны быть одного типа
# строка - запись ( иногда называют картежом )
# в каждом поле должна быть хотя бы одна уникальная запись ( primary key ), например id
# все команды выполняются по порядку

## полезные штуки
# SELECT * FROM albums LIMIT 5; 						   - LIMIT - показать 5 полей
# .dump albums 											   - показывает всю инфу о таблице ( командами которыми она создавалась)
# ORDER BY Title										   - ORDER BY Title отсортировать по тайтл 
 - ORDER BY Title DESC									   - Отсортировать по тайтл, от большого к меньшему
 - ORDER BY Title ASC									   - ASC обозначает от меньшего к большему ( но его не нужно указывать, потому что он юзается по дефолту )
 - SELECT * FROM albums ORDER BY Title LIMIT 5 ;		   - сначала идет ордер, потом лимит - сначала таблица отсортируется и из отсортированых выбрать первых 5
 - SELECT * FROM albums ORDER BY Title, ArtistId LIMIT 5 ; - отсортировать по тайтл, если есть одинаковые тайтл, то отсортировать по ArtistId 
# OFFSET 5										           - Начать с середины 
# SELECT DISTINCT Title, albumid 						   - DISTINCT означает Удалить дубликаты из вывода
# WHERE
 - WHERE column_1 = 100;
 - WHERE column_2 IN (1,2,3);
 - WHERE column_3 LIKE 'An%';
 - WHERE column_4 BETWEEN 10 AND 20;
# JOIN
 - INNER JOIN											   - Показать только те поля которые совпали
 - FULL JOIN											   - Показать все поля ( если где-то нет совпадений - покажет null )
 - LEFT JOIN											   - Показывает поля по левой таблице 
 - RIGHT JOIN   									
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$




